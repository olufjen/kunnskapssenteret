
package no.naks.services.nhn.client;

import java.net.MalformedURLException;
import java.net.URL;
import java.util.logging.Logger;
import javax.xml.namespace.QName;
import javax.xml.ws.Service;
import javax.xml.ws.WebEndpoint;
import javax.xml.ws.WebServiceClient;
import javax.xml.ws.WebServiceFeature;


/**
 * This class was generated by the JAX-WS RI.
 * JAX-WS RI 2.1.6 in JDK 6
 * Generated source version: 2.1
 * 
 */
@WebServiceClient(name = "CommunicationParty", targetNamespace = "http://register.nhn.no/CommunicationParty", wsdlLocation = "https://ws-test.nhn.no/v1/AR?wsdl")
public class CommunicationParty_Service
    extends Service
{

    private final static URL COMMUNICATIONPARTY_WSDL_LOCATION;
    private final static URL COMMUNICATIONPARTY_WSDL_PRODLOCATION;
    private final static Logger logger = Logger.getLogger(no.naks.services.nhn.client.CommunicationParty_Service.class.getName());
 
    
    static {
        URL url = null;
        URL pUrl = null;
        String testUrl = "https://ws-test.nhn.no/v1/AR?wsdl";
        String prodUrl = "https://ws.nhn.no/v1/AR";
       
        
        
        try {
            URL baseUrl;
            baseUrl = no.naks.services.nhn.client.CommunicationParty_Service.class.getResource(".");
            url = new URL(baseUrl, testUrl);
        } catch (MalformedURLException e) {
            logger.warning("Failed to create URL for the wsdl Location: 'https://ws-test.nhn.no/v1/AR?wsdl', retrying as a local file");
            logger.warning(e.getMessage());
        }
        
 /*       
        try {
            URL baseUrl;
            baseUrl = no.naks.services.nhn.client.CommunicationParty_Service.class.getResource(".");
            pUrl = new URL(baseUrl, prodUrl);
        } catch (MalformedURLException e) {
            logger.warning("Failed to create URL for the wsdl Location: 'https://ws-test.nhn.no/v1/AR?wsdl', retrying as a local file");
            logger.warning(e.getMessage());
        }   
*/            
        COMMUNICATIONPARTY_WSDL_LOCATION = url;
        COMMUNICATIONPARTY_WSDL_PRODLOCATION = pUrl;
        System.out.println("CommunicationParty_Service Static exec");
    }

    public CommunicationParty_Service(URL wsdlLocation, QName serviceName) {
        super(wsdlLocation, serviceName);
    }

    public CommunicationParty_Service(boolean t) {
    	
        super(COMMUNICATIONPARTY_WSDL_LOCATION, new QName("http://register.nhn.no/CommunicationParty", "CommunicationParty"));
        System.out.println("CommunicationParty_Service constructor test");
    }
    public CommunicationParty_Service() {
    	
        super(COMMUNICATIONPARTY_WSDL_PRODLOCATION, new QName("http://register.nhn.no/CommunicationParty", "CommunicationParty"));
        System.out.println("CommunicationParty_Service constructor prod");
    }
    /**
     * 
     * @return
     *     returns ICommunicationPartyService
     */
    @WebEndpoint(name = "BasicHttpBinding_ICommunicationPartyService")
    public ICommunicationPartyService getBasicHttpBindingICommunicationPartyService() {
        return super.getPort(new QName("http://register.nhn.no/CommunicationParty", "BasicHttpBinding_ICommunicationPartyService"), ICommunicationPartyService.class);
    }

    /**
     * 
     * @param features
     *     A list of {@link javax.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns ICommunicationPartyService
     */
    @WebEndpoint(name = "BasicHttpBinding_ICommunicationPartyService")
    public ICommunicationPartyService getBasicHttpBindingICommunicationPartyService(WebServiceFeature... features) {
        return super.getPort(new QName("http://register.nhn.no/CommunicationParty", "BasicHttpBinding_ICommunicationPartyService"), ICommunicationPartyService.class, features);
    }

}
